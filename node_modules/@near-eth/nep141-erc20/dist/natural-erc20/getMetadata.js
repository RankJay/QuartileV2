"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSymbol = exports.getDecimals = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("@near-eth/client/dist/utils");
const utils_2 = require("@near-eth/utils");
const getAddress_1 = __importDefault(require("../bridged-nep141/getAddress"));
const erc20Decimals = {};
async function getDecimals({ erc20Address, options }) {
    var _a, _b;
    if (erc20Decimals[erc20Address] !== undefined)
        return erc20Decimals[erc20Address];
    options = options !== null && options !== void 0 ? options : {};
    const bridgeParams = utils_1.getBridgeParams();
    const provider = (_a = options.provider) !== null && _a !== void 0 ? _a : utils_1.getEthProvider();
    const erc20Abi = (_b = options.erc20Abi) !== null && _b !== void 0 ? _b : bridgeParams.erc20Abi;
    let decimals;
    try {
        decimals = await utils_2.erc20.getDecimals({ erc20Address, provider, erc20Abi });
        // Only record decimals if it was success
        erc20Decimals[erc20Address] = decimals;
    }
    catch {
        console.log(`Failed to read token decimals for: ${erc20Address}`);
        decimals = 0;
    }
    return decimals;
}
exports.getDecimals = getDecimals;
const erc20Icons = {};
async function getIcon({ erc20Address, options }) {
    var _a, _b;
    if (erc20Icons[erc20Address] !== undefined)
        return erc20Icons[erc20Address];
    options = options !== null && options !== void 0 ? options : {};
    let icon;
    try {
        const nearAccount = (_a = options.nearAccount) !== null && _a !== void 0 ? _a : await utils_1.getNearAccount();
        const nep141Address = (_b = options.nep141Address) !== null && _b !== void 0 ? _b : getAddress_1.default({ erc20Address, options });
        const metadata = await utils_2.nep141.getMetadata({ nep141Address, nearAccount });
        icon = metadata.icon;
    }
    catch (error) {
        console.warn(error);
    }
    if (!icon) {
        // Checksum address needed to fetch token icons.
        const url = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${ethers_1.ethers.utils.getAddress(erc20Address)}/logo.png`;
        icon = await new Promise(resolve => {
            const img = new Image();
            img.onload = () => resolve(url);
            img.onerror = () => resolve(null);
            img.src = url;
        });
    }
    erc20Icons[erc20Address] = icon;
    return icon;
}
const erc20Symbols = {};
async function getSymbol({ erc20Address, options }) {
    var _a, _b;
    if (erc20Symbols[erc20Address])
        return erc20Symbols[erc20Address];
    options = options !== null && options !== void 0 ? options : {};
    const bridgeParams = utils_1.getBridgeParams();
    const provider = (_a = options.provider) !== null && _a !== void 0 ? _a : utils_1.getEthProvider();
    const erc20Abi = (_b = options.erc20Abi) !== null && _b !== void 0 ? _b : bridgeParams.erc20Abi;
    let symbol;
    try {
        symbol = await utils_2.erc20.getSymbol({ erc20Address, provider, erc20Abi });
        // Only record symbol if it was success
        erc20Symbols[erc20Address] = symbol;
    }
    catch {
        console.log(`Failed to read token symbol for: ${erc20Address}`);
        if (erc20Address.toLowerCase() === '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2') {
            symbol = 'MKR';
        }
        else {
            symbol = erc20Address.slice(0, 5) + 'â€¦';
        }
    }
    return symbol;
}
exports.getSymbol = getSymbol;
/**
 * Fetch name, icon, and decimals (precision) of ERC20 token with given `address`.
 * Values are cached.
 *
 * @param params Uses Named Arguments pattern, please pass arguments as object
 * @param params.erc20Address ERC20 token contract address
 * @param params.options Optional arguments
 * @param params.options.provider Ethereum provider to use
 * @param params.options.erc20Abi ERC-20 ABI to use
 *
 * @returns Metadata information
 */
async function getMetadata({ erc20Address, options }) {
    const [decimals, icon, symbol] = await Promise.all([
        getDecimals({ erc20Address, options }),
        getIcon({ erc20Address, options }),
        getSymbol({ erc20Address, options })
    ]);
    return {
        erc20Address,
        decimals,
        icon,
        symbol
    };
}
exports.default = getMetadata;
//# sourceMappingURL=getMetadata.js.map