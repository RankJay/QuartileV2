"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@near-eth/client/dist/utils");
const getAddress_1 = __importDefault(require("./getAddress"));
/**
 * Given an erc20 contract address, get the balance of user's equivalent NEP141.
 *
 * @param params Uses Named Arguments pattern, please pass arguments as object
 * @param params.erc20Address Contract address of an ERC20 token on Ethereum
 * @param params.owner NEAR account address
 * @param params.options Optional arguments.
 * @param params.options.nearAccount Connected NEAR wallet account to use.
 *
 * @returns If BridgeToken has been deployed, returns balance for `params.user`.
 *   Otherwise, returns `null`.
 */
async function getBalance({ erc20Address, owner, options }) {
    var _a;
    options = options !== null && options !== void 0 ? options : {};
    const nep141Address = getAddress_1.default({ erc20Address });
    const nearAccount = (_a = options.nearAccount) !== null && _a !== void 0 ? _a : await utils_1.getNearAccount();
    try {
        const balanceAsString = await nearAccount.viewFunction(nep141Address, 'ft_balance_of', { account_id: owner });
        return balanceAsString;
    }
    catch (e) {
        console.warn(e);
        if (e.message.includes('does not exist while viewing')) {
            return null;
        }
        throw e;
    }
}
exports.default = getBalance;
//# sourceMappingURL=getBalance.js.map