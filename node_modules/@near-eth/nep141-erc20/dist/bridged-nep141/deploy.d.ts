import { Account } from 'near-api-js';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
/**
 * Deploy a BridgeToken contract for the given erc20Address.
 *
 * The [Fungible Token Connector](https://github.com/near/rainbow-token-connector)
 * allows sending any ERC20 token to NEAR, but requires an initial one-time
 * deploy of a "BridgeToken" contract. This call will deploy such a token.
 *
 * How do you know if you need to call this? How do you know if a given
 * erc20Address already has an existing BridgeToken contract deployed? Try to
 * check {@link getBalance} for a user; if it returns `null`, then the
 * BridgeToken is not deployed. Example:
 *
 *     const userNearAccount = 'example.near'
 *     const erc20Address = '0x123abc...'
 *     const bridgedNep141Balance = bridgedNep141.getBalance({
 *       erc20Address,
 *       owner: userNearAccount
 *     })
 *     // Don't check `!bridgedNep141Balance`, because user may have a balance
 *     // of 0, which means the contract is deployed and they have no balance.
 *     // `0` in JavaScript is falsey.
 *     if (bridgedNep141Balance === null) {
 *       deployBridgeToken({ erc20Address })
 *     }
 *
 * @param params Uses Named Arguments pattern, please pass arguments as object
 * @param params.erc20Address Address of ERC20 token for which to deploy BridgeToken
 * @param params.options Optional arguments.
 * @param params.options.nearAccount Connected NEAR wallet account to use.
 * @param params.options.nep141Factory Bridge token factory account on NEAR.
 *
 * @returns void Doesn't actually return at all, as the contract call has an
 * attached deposit (of 30.02 NEAR) and will thus always cause a redirect to
 * NEAR Wallet for confirmation.
 */
export default function deployBridgeToken({ erc20Address, options }: {
    erc20Address: string;
    options?: {
        nearAccount?: Account;
        nep141Factory?: string;
    };
}): Promise<FinalExecutionOutcome>;
//# sourceMappingURL=deploy.d.ts.map